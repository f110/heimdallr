/*

MIT License

Copyright (c) 2019 Fumihiro Ito

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	certmanagerv1 "go.f110.dev/heimdallr/pkg/k8s/client/versioned/typed/certmanager/v1"
	certmanagerv1alpha2 "go.f110.dev/heimdallr/pkg/k8s/client/versioned/typed/certmanager/v1alpha2"
	certmanagerv1alpha3 "go.f110.dev/heimdallr/pkg/k8s/client/versioned/typed/certmanager/v1alpha3"
	certmanagerv1beta1 "go.f110.dev/heimdallr/pkg/k8s/client/versioned/typed/certmanager/v1beta1"
	etcdv1alpha1 "go.f110.dev/heimdallr/pkg/k8s/client/versioned/typed/etcd/v1alpha1"
	etcdv1alpha2 "go.f110.dev/heimdallr/pkg/k8s/client/versioned/typed/etcd/v1alpha2"
	monitoringv1 "go.f110.dev/heimdallr/pkg/k8s/client/versioned/typed/monitoring/v1"
	proxyv1alpha1 "go.f110.dev/heimdallr/pkg/k8s/client/versioned/typed/proxy/v1alpha1"
	proxyv1alpha2 "go.f110.dev/heimdallr/pkg/k8s/client/versioned/typed/proxy/v1alpha2"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	CertmanagerV1() certmanagerv1.CertmanagerV1Interface
	CertmanagerV1alpha2() certmanagerv1alpha2.CertmanagerV1alpha2Interface
	CertmanagerV1alpha3() certmanagerv1alpha3.CertmanagerV1alpha3Interface
	CertmanagerV1beta1() certmanagerv1beta1.CertmanagerV1beta1Interface
	EtcdV1alpha1() etcdv1alpha1.EtcdV1alpha1Interface
	EtcdV1alpha2() etcdv1alpha2.EtcdV1alpha2Interface
	MonitoringV1() monitoringv1.MonitoringV1Interface
	ProxyV1alpha1() proxyv1alpha1.ProxyV1alpha1Interface
	ProxyV1alpha2() proxyv1alpha2.ProxyV1alpha2Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	certmanagerV1       *certmanagerv1.CertmanagerV1Client
	certmanagerV1alpha2 *certmanagerv1alpha2.CertmanagerV1alpha2Client
	certmanagerV1alpha3 *certmanagerv1alpha3.CertmanagerV1alpha3Client
	certmanagerV1beta1  *certmanagerv1beta1.CertmanagerV1beta1Client
	etcdV1alpha1        *etcdv1alpha1.EtcdV1alpha1Client
	etcdV1alpha2        *etcdv1alpha2.EtcdV1alpha2Client
	monitoringV1        *monitoringv1.MonitoringV1Client
	proxyV1alpha1       *proxyv1alpha1.ProxyV1alpha1Client
	proxyV1alpha2       *proxyv1alpha2.ProxyV1alpha2Client
}

// CertmanagerV1 retrieves the CertmanagerV1Client
func (c *Clientset) CertmanagerV1() certmanagerv1.CertmanagerV1Interface {
	return c.certmanagerV1
}

// CertmanagerV1alpha2 retrieves the CertmanagerV1alpha2Client
func (c *Clientset) CertmanagerV1alpha2() certmanagerv1alpha2.CertmanagerV1alpha2Interface {
	return c.certmanagerV1alpha2
}

// CertmanagerV1alpha3 retrieves the CertmanagerV1alpha3Client
func (c *Clientset) CertmanagerV1alpha3() certmanagerv1alpha3.CertmanagerV1alpha3Interface {
	return c.certmanagerV1alpha3
}

// CertmanagerV1beta1 retrieves the CertmanagerV1beta1Client
func (c *Clientset) CertmanagerV1beta1() certmanagerv1beta1.CertmanagerV1beta1Interface {
	return c.certmanagerV1beta1
}

// EtcdV1alpha1 retrieves the EtcdV1alpha1Client
func (c *Clientset) EtcdV1alpha1() etcdv1alpha1.EtcdV1alpha1Interface {
	return c.etcdV1alpha1
}

// EtcdV1alpha2 retrieves the EtcdV1alpha2Client
func (c *Clientset) EtcdV1alpha2() etcdv1alpha2.EtcdV1alpha2Interface {
	return c.etcdV1alpha2
}

// MonitoringV1 retrieves the MonitoringV1Client
func (c *Clientset) MonitoringV1() monitoringv1.MonitoringV1Interface {
	return c.monitoringV1
}

// ProxyV1alpha1 retrieves the ProxyV1alpha1Client
func (c *Clientset) ProxyV1alpha1() proxyv1alpha1.ProxyV1alpha1Interface {
	return c.proxyV1alpha1
}

// ProxyV1alpha2 retrieves the ProxyV1alpha2Client
func (c *Clientset) ProxyV1alpha2() proxyv1alpha2.ProxyV1alpha2Interface {
	return c.proxyV1alpha2
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.certmanagerV1, err = certmanagerv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.certmanagerV1alpha2, err = certmanagerv1alpha2.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.certmanagerV1alpha3, err = certmanagerv1alpha3.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.certmanagerV1beta1, err = certmanagerv1beta1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.etcdV1alpha1, err = etcdv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.etcdV1alpha2, err = etcdv1alpha2.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.monitoringV1, err = monitoringv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.proxyV1alpha1, err = proxyv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.proxyV1alpha2, err = proxyv1alpha2.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.certmanagerV1 = certmanagerv1.NewForConfigOrDie(c)
	cs.certmanagerV1alpha2 = certmanagerv1alpha2.NewForConfigOrDie(c)
	cs.certmanagerV1alpha3 = certmanagerv1alpha3.NewForConfigOrDie(c)
	cs.certmanagerV1beta1 = certmanagerv1beta1.NewForConfigOrDie(c)
	cs.etcdV1alpha1 = etcdv1alpha1.NewForConfigOrDie(c)
	cs.etcdV1alpha2 = etcdv1alpha2.NewForConfigOrDie(c)
	cs.monitoringV1 = monitoringv1.NewForConfigOrDie(c)
	cs.proxyV1alpha1 = proxyv1alpha1.NewForConfigOrDie(c)
	cs.proxyV1alpha2 = proxyv1alpha2.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.certmanagerV1 = certmanagerv1.New(c)
	cs.certmanagerV1alpha2 = certmanagerv1alpha2.New(c)
	cs.certmanagerV1alpha3 = certmanagerv1alpha3.New(c)
	cs.certmanagerV1beta1 = certmanagerv1beta1.New(c)
	cs.etcdV1alpha1 = etcdv1alpha1.New(c)
	cs.etcdV1alpha2 = etcdv1alpha2.New(c)
	cs.monitoringV1 = monitoringv1.New(c)
	cs.proxyV1alpha1 = proxyv1alpha1.New(c)
	cs.proxyV1alpha2 = proxyv1alpha2.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
